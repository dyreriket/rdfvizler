@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#>.
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#>.
@prefix owl:   <http://www.w3.org/2002/07/owl#>.
@prefix xsd:   <http://www.w3.org/2001/XMLSchema#> .

@prefix gv:    <http://rdfvizler.gitlab.com/vocab/core#>
@prefix gva:   <http://rdfvizler.gitlab.com/vocab/attribute#>
@prefix gvn:   <http://rdfvizler.gitlab.com/vocab/attribute/default/node#>
@prefix gve:   <http://rdfvizler.gitlab.com/vocab/attribute/default/edge#>

@prefix :      <urn:temp#>


[init:
->
   (:graph rdf:type gv:DiRootGraph)
   (:graph gva:rankdir "TD")
   (:graph gva:nodesep "0.3")
   (:graph gva:ranksep "0.3")
   (:graph gva:center "true")
   (:graph gva:overlap "false")
   (:graph gva:splines "true")
   // node defaults
   (:graph gvn:shape "box")
   (:graph gvn:fontname "Arial")
   (:graph gvn:fontsize "10px")
   (:graph gvn:height "0")
   (:graph gvn:width "0")
   // edge defaults
   (:graph gve:fontname "Arial")
   (:graph gve:fontsize "10px")
]

[Triples2Dot:
  (?xs ?xp ?xo)
  namespace(?xp, ?ns)
  // need this to terminate: do not include rule produces triples
  notEqual(?ns, "urn:temp#")
  notEqual(?ns, "http://rdfvizler.gitlab.com/vocab/core#")
  notEqual(?ns, "http://rdfvizler.gitlab.com/vocab/attribute#")
  notEqual(?ns, "http://rdfvizler.gitlab.com/vocab/attribute/default/node#")
  notEqual(?ns, "http://rdfvizler.gitlab.com/vocab/attribute/default/edge#")
  // do not include type relationships
  notEqual(?xp, rdf:type)
  // literals cannot be subjects, so we skolemise everything (for simplicity):
  notLiteral(?xo)
  makeSkolem(?s, ?xs)
  makeSkolem(?p, ?xs, ?xp, ?xo)
  makeSkolem(?o, ?xo)
  shortvalue(?xp, ?pname)

->
  (?s gv:hasID ?xs)
  (?o gv:hasID ?xo)
  (:graph gv:hasEdge ?p)
  (:graph gv:hasNode ?s)
  (:graph gv:hasNode ?o)
  (?p gv:hasSource ?s)
  (?p gv:hasTarget ?o)
  (?p gva:label ?pname)
]

[URIs:
  (:graph gv:hasNode ?node) (?node gv:hasID ?id)
  notBNode(?id) notLiteral(?id)
  typedvalue(?id, ?name)
->
  (?node gva:label ?name)
  (?node gva:style "filled")
  (?node gva:fillcolor "lightskyblue")
  (?node gva:URL ?id)
]

[Blanks:
  (:graph gv:hasNode ?node) (?node gv:hasID ?id)
  isBNode(?id)
  typedvalue(?id, ?name)
->
  (?node gva:label ?name)
  (?node gva:style "filled,dashed")
  (?node gva:fillcolor "gray90")
  (?node gva:height ".3")
  (?node gva:width ".3")
]

[Literals:
  (:graph gv:hasNode ?node) (?node gv:hasID ?id)
  isLiteral(?id)
  typedvalue(?id, ?name)
->
  (?node gva:label ?name)
  (?node gva:style "rounded,filled")
  (?node gva:fillcolor "lemonchiffon")
  (?node gva:fontname "Times")
]
